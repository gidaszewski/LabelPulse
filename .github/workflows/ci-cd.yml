name: Deploy Django App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.USER_DB }}
          POSTGRES_PASSWORD: ${{ secrets.PASS_DB }}
          POSTGRES_DB: ${{ secrets.NAME_DB }}
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:latest
        ports:
          - "6379:6379"

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Migrations
      run: |
        python src/bin/manage.py migrate
      env:
        NAME_DB: ${{ secrets.NAME_DB }}
        USER_DB: ${{ secrets.USER_DB }}
        PASS_DB: ${{ secrets.PASS_DB }}
        HOST_DB: ${{ secrets.HOST_DB }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        USE_SPACES: ${{ secrets.USE_SPACES }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_CUSTOM_DOMAIN: ${{ secrets.AWS_S3_CUSTOM_DOMAIN }}
        AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
        AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
        CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}

    - name: Add the private SSH key to the ssh-agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

    - name: Deploy to DigitalOcean Droplet
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        scp -o StrictHostKeyChecking=no -r * root@${{ secrets.SERVER_IP }}:/var/www/labelpulse
        ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'ENDSSH'
          cd /var/www/labelpulse
          docker-compose up --build -d
        ENDSSH